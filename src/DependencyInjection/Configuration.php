<?php

declare(strict_types=1);

namespace ProBackupBundle\DependencyInjection;

use Symfony\Component\Config\Definition\Builder\TreeBuilder;
use Symfony\Component\Config\Definition\ConfigurationInterface;

/**
 * Configuration for the Backup bundle.
 */
class Configuration implements ConfigurationInterface
{
    public function getConfigTreeBuilder(): TreeBuilder
    {
        $treeBuilder = new TreeBuilder('symfony_backup');
        $rootNode = $treeBuilder->getRootNode();

        $rootNode
            ->children()
                ->scalarNode('backup_dir')
                    ->info('Base directory for storing backups')
                    ->defaultValue('%kernel.project_dir%/var/backups')
                ->end()
                ->scalarNode('default_storage')
                    ->info('Default storage adapter to use')
                    ->defaultValue('local')
                ->end()

                // Storage adapters configuration
                ->arrayNode('storage')
                    ->addDefaultsIfNotSet()
                    ->children()
                        // Local storage
                        ->arrayNode('local')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->scalarNode('adapter')->defaultValue('local')->end()
                                ->arrayNode('options')
                                    ->addDefaultsIfNotSet()
                                    ->children()
                                        ->scalarNode('path')
                                            ->defaultValue('%kernel.project_dir%/var/backups')
                                        ->end()
                                        ->integerNode('permissions')
                                            ->defaultValue(0755)
                                        ->end()
                                    ->end()
                                ->end()
                            ->end()
                        ->end()

                        // S3 storage
                        ->arrayNode('s3')
                            ->canBeEnabled()
                            ->children()
                                ->scalarNode('adapter')->defaultValue('s3')->end()
                                ->arrayNode('options')
                                    ->isRequired()
                                    ->children()
                                        ->scalarNode('bucket')
                                            ->info('S3 bucket name')
                                            ->isRequired()
                                        ->end()
                                        ->scalarNode('region')
                                            ->info('AWS region')
                                            ->defaultValue('us-east-1')
                                        ->end()
                                        ->scalarNode('prefix')
                                            ->info('Prefix for S3 keys')
                                            ->defaultValue('backups')
                                        ->end()
                                        ->arrayNode('credentials')
                                            ->isRequired()
                                            ->children()
                                                ->scalarNode('key')
                                                    ->info('AWS access key ID')
                                                    ->isRequired()
                                                ->end()
                                                ->scalarNode('secret')
                                                    ->info('AWS secret access key')
                                                    ->isRequired()
                                                ->end()
                                            ->end()
                                        ->end()
                                    ->end()
                                ->end()
                            ->end()
                        ->end()

                        // Google Cloud storage
                        ->arrayNode('google_cloud')
                            ->canBeEnabled()
                            ->children()
                                ->scalarNode('adapter')->defaultValue('google_cloud')->end()
                                ->arrayNode('options')
                                    ->isRequired()
                                    ->children()
                                        ->scalarNode('bucket')
                                            ->info('Google Cloud Storage bucket name')
                                            ->isRequired()
                                        ->end()
                                        ->scalarNode('project_id')
                                            ->info('Google Cloud project ID')
                                            ->isRequired()
                                        ->end()
                                        ->scalarNode('key_file')
                                            ->info('Path to Google Cloud key file')
                                            ->isRequired()
                                        ->end()
                                        ->scalarNode('prefix')
                                            ->info('Prefix for object keys')
                                            ->defaultValue('backups')
                                        ->end()
                                    ->end()
                                ->end()
                            ->end()
                        ->end()
                    ->end()
                ->end()

                // Database configuration
                ->arrayNode('database')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->booleanNode('enabled')
                            ->defaultTrue()
                        ->end()
                        ->arrayNode('connections')
                            ->info('List of Doctrine connections to backup')
                            ->defaultValue(['default'])
                            ->scalarPrototype()->end()
                        ->end()
                        ->scalarNode('compression')
                            ->info('Compression type to use for database backups')
                            ->defaultValue('gzip')
                        ->end()
                        ->integerNode('retention_days')
                            ->info('Number of days to keep backups')
                            ->defaultValue(30)
                        ->end()
                        ->arrayNode('exclude_tables')
                            ->info('Tables to exclude from backups')
                            ->defaultValue(['cache_items', 'sessions'])
                            ->scalarPrototype()->end()
                        ->end()
                        ->arrayNode('options')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->arrayNode('mysql')
                                    ->addDefaultsIfNotSet()
                                    ->children()
                                        ->booleanNode('single_transaction')
                                            ->defaultTrue()
                                        ->end()
                                        ->booleanNode('routines')
                                            ->defaultTrue()
                                        ->end()
                                        ->booleanNode('triggers')
                                            ->defaultTrue()
                                        ->end()
                                        ->booleanNode('add_drop_table')
                                            ->defaultTrue()
                                        ->end()
                                    ->end()
                                ->end()
                                ->arrayNode('postgresql')
                                    ->addDefaultsIfNotSet()
                                    ->children()
                                        ->enumNode('format')
                                            ->values(['plain', 'custom'])
                                            ->defaultValue('plain')
                                        ->end()
                                        ->booleanNode('verbose')
                                            ->defaultTrue()
                                        ->end()
                                        ->booleanNode('clean')
                                            ->defaultFalse()
                                        ->end()
                                        ->booleanNode('create')
                                            ->defaultTrue()
                                        ->end()
                                    ->end()
                                ->end()
                                ->arrayNode('sqlserver')
                                    ->addDefaultsIfNotSet()
                                    ->children()
                                        ->booleanNode('single_user')
                                            ->defaultTrue()
                                        ->end()
                                    ->end()
                                ->end()
                                ->arrayNode('sqlite')
                                    ->addDefaultsIfNotSet()
                                    ->children()
                                        ->booleanNode('backup_existing')
                                            ->defaultTrue()
                                        ->end()
                                    ->end()
                                ->end()
                            ->end()
                        ->end()
                    ->end()
                ->end()

                // Filesystem configuration
                ->arrayNode('filesystem')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->booleanNode('enabled')
                            ->defaultFalse()
                        ->end()
                        ->arrayNode('paths')
                            ->arrayPrototype()
                                ->children()
                                    ->scalarNode('path')
                                        ->isRequired()
                                    ->end()
                                    ->arrayNode('exclude')
                                        ->scalarPrototype()->end()
                                    ->end()
                                ->end()
                            ->end()
                        ->end()
                        ->scalarNode('compression')
                            ->defaultValue('zip')
                        ->end()
                        ->integerNode('retention_days')
                            ->defaultValue(7)
                        ->end()
                    ->end()
                ->end()

                // Compression configuration
                ->arrayNode('compression')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->arrayNode('gzip')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->integerNode('level')
                                    ->min(1)
                                    ->max(9)
                                    ->defaultValue(6)
                                ->end()
                                ->booleanNode('keep_original')
                                    ->defaultFalse()
                                ->end()
                            ->end()
                        ->end()
                        ->arrayNode('zip')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->integerNode('level')
                                    ->min(0)
                                    ->max(9)
                                    ->defaultValue(6)
                                ->end()
                                ->booleanNode('keep_original')
                                    ->defaultFalse()
                                ->end()
                            ->end()
                        ->end()
                    ->end()
                ->end()

                // Schedule configuration
                ->arrayNode('schedule')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->booleanNode('enabled')
                            ->defaultFalse()
                        ->end()
                        ->arrayNode('database')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->enumNode('frequency')
                                    ->values(['daily', 'weekly', 'monthly'])
                                    ->defaultValue('daily')
                                ->end()
                                ->scalarNode('time')
                                    ->defaultValue('02:00')
                                ->end()
                                ->booleanNode('enabled')
                                    ->defaultTrue()
                                ->end()
                            ->end()
                        ->end()
                        ->arrayNode('filesystem')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->enumNode('frequency')
                                    ->values(['daily', 'weekly', 'monthly'])
                                    ->defaultValue('weekly')
                                ->end()
                                ->scalarNode('time')
                                    ->defaultValue('03:00')
                                ->end()
                                ->booleanNode('enabled')
                                    ->defaultFalse()
                                ->end()
                            ->end()
                        ->end()
                    ->end()
                ->end()

                // Notifications configuration
                ->arrayNode('notifications')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->booleanNode('on_success')
                            ->defaultFalse()
                        ->end()
                        ->booleanNode('on_failure')
                            ->defaultTrue()
                        ->end()
                        ->arrayNode('channels')
                            ->defaultValue(['email'])
                            ->scalarPrototype()->end()
                        ->end()
                    ->end()
                ->end()

                // Profiler configuration
                ->arrayNode('profiler')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->booleanNode('enabled')
                            ->defaultValue('%kernel.debug%')
                        ->end()
                    ->end()
                ->end()
            ->end()
        ;

        return $treeBuilder;
    }
}
